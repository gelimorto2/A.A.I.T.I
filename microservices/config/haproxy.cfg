# HAProxy Configuration for AAITI Microservices
# High Availability Load Balancer

global
    # Logging
    log stdout local0
    
    # Security
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    daemon

    # Performance tuning
    maxconn 4096
    nbthread 4
    
    # SSL/TLS configuration
    ssl-default-bind-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
    mode http
    log global
    option httplog
    option dontlognull
    option http-server-close
    option forwardfor except 127.0.0.0/8
    option redispatch
    retries 3
    timeout http-request 10s
    timeout queue 1m
    timeout connect 10s
    timeout client 1m
    timeout server 1m
    timeout http-keep-alive 10s
    timeout check 10s
    maxconn 3000

# Statistics interface
frontend stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 30s
    stats admin if TRUE

# Frontend for HTTP traffic
frontend aaiti-frontend
    bind *:80
    bind *:443 ssl crt /etc/ssl/certs/aaiti.pem
    
    # Redirect HTTP to HTTPS in production
    redirect scheme https if !{ ssl_fc }
    
    # Security headers
    http-response set-header X-Frame-Options DENY
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains"
    
    # Health check endpoint
    acl health_check path_beg /health
    use_backend health-backend if health_check
    
    # API routing
    acl api_auth path_beg /api/auth
    acl api_trading path_beg /api/trading
    acl api_analytics path_beg /api/analytics
    acl api_ml path_beg /api/ml
    acl api_notifications path_beg /api/notifications
    acl api_users path_beg /api/users
    acl api_metrics path_beg /metrics
    
    # Route to appropriate backend
    use_backend auth-backend if api_auth
    use_backend trading-backend if api_trading
    use_backend analytics-backend if api_analytics
    use_backend ml-backend if api_ml
    use_backend notification-backend if api_notifications
    use_backend user-backend if api_users
    use_backend metrics-backend if api_metrics
    
    # Default to API gateway
    default_backend api-gateway-backend

# Backend definitions
backend api-gateway-backend
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    server gateway1 api-gateway:3000 check
    # Add more gateway instances for HA
    # server gateway2 api-gateway-2:3000 check backup

backend auth-backend
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    server auth1 auth-service:3001 check
    # Add more auth instances for HA
    # server auth2 auth-service-2:3001 check backup

backend trading-backend
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    server trading1 trading-service:3002 check
    # Add more trading instances for HA
    # server trading2 trading-service-2:3002 check backup

backend analytics-backend
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    server analytics1 analytics-service:3003 check
    # Add more analytics instances for HA
    # server analytics2 analytics-service-2:3003 check backup

backend ml-backend
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    server ml1 ml-service:3004 check
    # Add more ML instances for HA
    # server ml2 ml-service-2:3004 check backup

backend notification-backend
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    server notification1 notification-service:3005 check
    # Add more notification instances for HA
    # server notification2 notification-service-2:3005 check backup

backend user-backend
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    server user1 user-service:3006 check
    # Add more user instances for HA
    # server user2 user-service-2:3006 check backup

backend health-backend
    option httpchk GET /health
    http-check expect status 200
    server health api-gateway:3000 check

backend metrics-backend
    option httpchk GET /health
    http-check expect status 200
    server metrics prometheus:9090 check