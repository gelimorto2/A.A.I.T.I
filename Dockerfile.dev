# Docker Development Environment - Performance Optimized
FROM node:20-alpine AS development

# Install development dependencies
RUN apk update && apk add --no-cache \
    python3 \
    make \
    g++ \
    sqlite-dev \
    curl \
    bash

# Set working directory
WORKDIR /app

# Create non-root user first
RUN addgroup -g 1001 -S aaiti && adduser -S aaiti -u 1001 -G aaiti

# Performance: Set optimized environment variables for development
ENV NODE_ENV=development
ENV NPM_CONFIG_UPDATE_NOTIFIER=false
ENV NPM_CONFIG_FUND=false
ENV NPM_CONFIG_AUDIT=false
ENV NODE_OPTIONS="--max-old-space-size=4096"
ENV CHOKIDAR_USEPOLLING=true
ENV WATCHPACK_POLLING=true

# Copy package files with proper ownership
COPY --chown=aaiti:aaiti package*.json ./
COPY --chown=aaiti:aaiti .npmrc ./
COPY --chown=aaiti:aaiti backend/package*.json ./backend/
COPY --chown=aaiti:aaiti frontend/package*.json ./frontend/

# Switch to non-root user for dependency installation
USER aaiti

# Performance: Install all dependencies with optimizations
RUN npm install --prefer-offline --no-progress
RUN cd backend && npm install --prefer-offline --no-progress
RUN cd frontend && npm install --prefer-offline --no-progress

# Switch back to root to copy files and set permissions
USER root

# Copy source code with proper ownership
COPY --chown=aaiti:aaiti . .

# Create development directories
RUN mkdir -p ./data ./logs ./cache && \
    chown -R aaiti:aaiti ./data ./logs ./cache

# Switch back to non-root user
USER aaiti

# Expose development ports
EXPOSE 5000 3000

# Performance: Enhanced health check for development
HEALTHCHECK --interval=60s --timeout=30s --start-period=120s --retries=3 \
    CMD curl -f http://localhost:5000/api/health || curl -f http://localhost:3000 || exit 1

# Development-specific optimizations
ENV UV_THREADPOOL_SIZE=8

# Start development servers with better process management
CMD ["npm", "run", "dev"]