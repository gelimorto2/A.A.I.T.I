#!/bin/bash

# A.A.I.T.I Interactive Docker Installer
# One program for everything - Docker-based installation only

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Configuration
PROJECT_NAME="A.A.I.T.I"
VERSION="2.1.0"

# Print header
echo -e "${BLUE}"
cat << EOF
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    üöÄ ${PROJECT_NAME} v${VERSION} - Interactive Installer                     ‚ïë
‚ïë                      Auto AI Trading Interface - Docker Edition                     ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
echo -e "${NC}"

# Print functions
print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_step() {
    echo -e "${PURPLE}üîß $1${NC}"
}

# Check if Docker is installed and running
check_docker() {
    print_step "Checking Docker installation..."
    
    if ! command -v docker &> /dev/null; then
        print_error "Docker is not installed. Please install Docker first:"
        echo ""
        echo "üêß Linux: curl -fsSL https://get.docker.com | sh"
        echo "üçé macOS: Download Docker Desktop from https://docker.com"
        echo ""
        return 1
    fi
    
    if ! docker info &> /dev/null; then
        print_error "Docker daemon is not running. Please start Docker:"
        echo ""
        echo "üêß Linux: sudo systemctl start docker"
        echo "üçé macOS: Start Docker Desktop"
        echo ""
        return 1
    fi
    
    print_success "Docker is installed and running"
    
    # Check Docker Compose
    if docker compose version &> /dev/null; then
        COMPOSE_CMD="docker compose"
    elif command -v docker-compose &> /dev/null; then
        COMPOSE_CMD="docker-compose"
    else
        print_error "Docker Compose is not available"
        return 1
    fi
    
    print_success "Docker Compose is available"
    return 0
}

# Main installation function
install_aaiti() {
    print_step "Starting A.A.I.T.I installation..."
    
    if ! check_docker; then
        print_error "Docker setup failed. Please install Docker and try again."
        echo ""
        echo "Visit: https://docs.docker.com/get-docker/"
        exit 1
    fi
    
    echo ""
    print_info "üê≥ A.A.I.T.I will be installed using Docker"
    print_info "üìä This creates a production-ready trading platform"
    echo ""
    
    # Ask for confirmation
    echo -ne "${CYAN}Continue with installation? (y/N): ${NC}"
    read -r confirm
    
    if [[ ! $confirm =~ ^[Yy]$ ]]; then
        print_info "Installation cancelled"
        exit 0
    fi
    
    # Build and start
    print_step "Building Docker containers (this may take a few minutes)..."
    echo -ne "${YELLOW}Building: "
    for _ in {1..20}; do
        echo -ne "‚ñì"
        sleep 0.1
    done
    echo -e " ${GREEN}‚úì${NC}"
    
    if ! $COMPOSE_CMD build aaiti; then
        print_error "Failed to build Docker containers"
        print_error "Please check Docker is running and try again"
        exit 1
    fi
    
    print_step "Starting A.A.I.T.I services..."
    echo -ne "${YELLOW}Starting: "
    for _ in {1..15}; do
        echo -ne "‚ñì"
        sleep 0.1
    done
    echo -e " ${GREEN}‚úì${NC}"
    
    if ! $COMPOSE_CMD up -d aaiti; then
        print_error "Failed to start services"
        print_error "Please check the logs with: $COMPOSE_CMD logs aaiti"
        exit 1
    fi
    
    # Wait for services
    print_step "Waiting for services to initialize..."
    echo -ne "${CYAN}Initializing"
    for _ in {1..30}; do
        echo -ne "."
        sleep 0.3
    done
    echo -e " ${GREEN}Ready!${NC}"
    
    # Success message
    echo ""
    echo -e "${GREEN}${WHITE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${GREEN}${WHITE}‚ïë                           üéâ Installation Complete! üéâ                                  ‚ïë${NC}"
    echo -e "${GREEN}${WHITE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
    echo -e "${WHITE}üìä A.A.I.T.I Dashboard:${NC} ${BLUE}http://localhost:5000${NC}"
    echo ""
    echo -e "${WHITE}Management Commands:${NC}"
    echo -e "${CYAN}üìã View logs:${NC} $COMPOSE_CMD logs -f aaiti"
    echo -e "${CYAN}üìä Check status:${NC} $COMPOSE_CMD ps"
    echo -e "${CYAN}‚èπÔ∏è  Stop:${NC} $COMPOSE_CMD down"
    echo -e "${CYAN}üîÑ Restart:${NC} $COMPOSE_CMD restart aaiti"
    echo ""
}

# Check status of existing installation
check_status() {
    print_step "Checking A.A.I.T.I status..."
    
    if ! check_docker; then
        print_error "Docker is not available"
        return 1
    fi
    
    # Check if containers are running
    if $COMPOSE_CMD ps aaiti | grep -q "Up"; then
        print_success "A.A.I.T.I is running"
        echo -e "${BLUE}üìä Dashboard: http://localhost:5000${NC}"
        
        # Try health check
        if command -v curl &> /dev/null; then
            if curl -f http://localhost:5000/api/health &> /dev/null; then
                print_success "Backend is healthy"
            else
                print_warning "Backend may still be starting up"
            fi
        fi
    else
        print_warning "A.A.I.T.I is not running"
        echo "Use option 1 to start installation"
    fi
}

# Stop A.A.I.T.I
stop_aaiti() {
    print_step "Stopping A.A.I.T.I..."
    
    if ! check_docker; then
        print_error "Docker is not available"
        return 1
    fi
    
    if $COMPOSE_CMD down; then
        print_success "A.A.I.T.I stopped successfully"
    else
        print_error "Failed to stop A.A.I.T.I"
    fi
}

# Show logs
show_logs() {
    print_step "Showing A.A.I.T.I logs..."
    
    if ! check_docker; then
        print_error "Docker is not available"
        return 1
    fi
    
    print_info "Press Ctrl+C to exit logs"
    sleep 2
    $COMPOSE_CMD logs -f aaiti
}

# Show help
show_help() {
    echo "${PROJECT_NAME} Interactive Docker Installer"
    echo ""
    echo "This installer creates a production-ready ${PROJECT_NAME} trading platform using Docker."
    echo ""
    echo "Requirements:"
    echo "  ‚Ä¢ Docker 20.0+ with Docker Compose"
    echo "  ‚Ä¢ 4GB RAM (recommended)"
    echo "  ‚Ä¢ 2GB disk space"
    echo "  ‚Ä¢ Internet connection"
    echo ""
    echo "Supported Platforms:"
    echo "  ‚Ä¢ Linux (all distributions with Docker support)"
    echo "  ‚Ä¢ macOS with Docker Desktop"
    echo ""
    echo "Usage:"
    echo "  ./install           # Interactive menu"
    echo "  ./install help      # Show this help"
    echo ""
}

# Main menu
main_menu() {
    while true; do
        echo ""
        echo -e "${CYAN}üîß ${PROJECT_NAME} Interactive Installer${NC}"
        echo -e "${CYAN}===================================${NC}"
        echo ""
        echo "1) üöÄ Install ${PROJECT_NAME} (Production Ready)"
        echo "2) üìä Check Status"
        echo "3) ‚èπÔ∏è  Stop ${PROJECT_NAME}"
        echo "4) üìã View Logs"
        echo "5) ‚ùì Help"
        echo "6) üö™ Exit"
        echo ""
        
        echo -ne "${CYAN}Select an option (1-6): ${NC}"
        read -r choice
        
        case $choice in
            1)
                install_aaiti
                ;;
            2)
                check_status
                ;;
            3)
                stop_aaiti
                ;;
            4)
                show_logs
                ;;
            5)
                show_help
                ;;
            6)
                print_info "Goodbye! üëã"
                exit 0
                ;;
            *)
                print_error "Invalid selection. Please choose 1-6."
                sleep 2
                ;;
        esac
        
        echo ""
        echo -ne "${YELLOW}Press Enter to continue...${NC}"
        read -r
    done
}

# Handle command line arguments
case "${1:-}" in
    "help"|"--help"|"-h")
        show_help
        ;;
    "status"|"check")
        check_status
        ;;
    "stop")
        stop_aaiti
        ;;
    "logs")
        show_logs
        ;;
    *)
        main_menu
        ;;
esac