#!/bin/bash

# A.A.I.T.I Universal Installer & Toolkit
# All-in-one installer that handles Docker, npm, and demo functionality
# Cross-platform installer that auto-detects your system

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
PROJECT_NAME="A.A.I.T.I"
VERSION="2.0.0"
COMPOSE_FILE="docker-compose.yml"

# Print header
echo -e "${BLUE}"
cat << "EOF"
╔══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
║                              🚀 A.A.I.T.I v2.0.0 - Universal Installer & Toolkit                                  ║
║                               Auto AI Trading Interface - All-in-One Setup                                         ║
╚══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝
EOF
echo -e "${NC}"

# Function to print messages
print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

print_step() {
    echo -e "${PURPLE}🔧 $1${NC}"
}

# Detect operating system
detect_os() {
    case "$(uname -s)" in
        Linux*)
            OS="linux"
            print_info "Detected: Linux"
            ;;
        Darwin*)
            OS="macos"
            print_info "Detected: macOS"
            ;;
        CYGWIN*|MINGW*|MSYS*)
            OS="windows"
            print_info "Detected: Windows (WSL/Git Bash)"
            ;;
        *)
            OS="linux"
            print_warning "Unknown OS, defaulting to Linux"
            ;;
    esac
}

# Check if Docker is installed and running
check_docker() {
    print_step "Checking Docker installation..."
    
    if ! command -v docker &> /dev/null; then
        print_error "Docker is not installed. Please install Docker first:"
        case "$OS" in
            "linux")
                echo "  Ubuntu/Debian: curl -fsSL https://get.docker.com | sh"
                echo "  CentOS/RHEL: sudo yum install docker-ce"
                echo "  Fedora: sudo dnf install docker-ce"
                ;;
            "macos")
                echo "  macOS: Download Docker Desktop from https://docker.com"
                ;;
            "windows")
                echo "  Windows: Download Docker Desktop from https://docker.com"
                ;;
        esac
        return 1
    fi
    
    if ! docker info &> /dev/null; then
        print_error "Docker daemon is not running. Please start Docker:"
        case "$OS" in
            "linux")
                echo "  sudo systemctl start docker"
                ;;
            "macos"|"windows")
                echo "  Start Docker Desktop"
                ;;
        esac
        return 1
    fi
    
    print_success "Docker is installed and running"
    
    # Check Docker Compose
    if ! docker compose version &> /dev/null; then
        if ! command -v docker-compose &> /dev/null; then
            print_error "Docker Compose is not available"
            return 1
        else
            COMPOSE_CMD="docker-compose"
        fi
    else
        COMPOSE_CMD="docker compose"
    fi
    
    print_success "Docker Compose is available"
    return 0
}

# Check Node.js installation
check_node() {
    print_step "Checking Node.js installation..."
    
    if ! command -v node &> /dev/null; then
        print_warning "Node.js is not installed"
        case "$OS" in
            "linux")
                echo "Install with: curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash - && sudo apt-get install -y nodejs"
                ;;
            "macos")
                echo "Install with Homebrew: brew install node"
                ;;
            "windows")
                echo "Download from: https://nodejs.org/"
                ;;
        esac
        return 1
    fi
    
    local node_version=$(node --version | sed 's/v//')
    local node_major=$(echo $node_version | cut -d. -f1)
    
    if [ "$node_major" -lt 18 ]; then
        print_warning "Node.js version $node_version is too old. Please install Node.js 18+"
        return 1
    fi
    
    print_success "Node.js $node_version is installed"
    return 0
}

# Docker installation method
install_docker() {
    print_step "Starting Docker installation..."
    
    if ! check_docker; then
        print_error "Docker setup failed. Please install Docker and try again."
        exit 1
    fi
    
    echo ""
    echo -e "${BLUE}Select Docker installation type:${NC}"
    echo "1) 🎯 Production (Recommended)"
    echo "2) 🔧 Development (with hot reload)"
    echo "3) 📊 Production + Monitoring (Prometheus/Grafana)"
    echo "4) 🚀 Full Stack (All services)"
    echo "5) ⚡ Quick Start (Just run it)"
    echo ""
    
    read -p "Enter your choice (1-5): " docker_choice
    
    case $docker_choice in
        1)
            PROFILES=""
            DESCRIPTION="Production A.A.I.T.I"
            ;;
        2)
            PROFILES="--profile development"
            DESCRIPTION="Development A.A.I.T.I"
            ;;
        3)
            PROFILES="--profile production --profile monitoring"
            DESCRIPTION="Production + Monitoring"
            ;;
        4)
            PROFILES="--profile production --profile monitoring --profile nginx --profile redis"
            DESCRIPTION="Full Stack"
            ;;
        5)
            PROFILES=""
            DESCRIPTION="Quick Start"
            ;;
        *)
            print_error "Invalid selection"
            exit 1
            ;;
    esac
    
    print_info "Installing: $DESCRIPTION"
    print_info "This may take a few minutes..."
    
    # Build and start services
    print_step "Building Docker images..."
    $COMPOSE_CMD build aaiti
    
    print_step "Starting services..."
    if [ -n "$PROFILES" ]; then
        $COMPOSE_CMD $PROFILES up -d
    else
        $COMPOSE_CMD up -d aaiti
    fi
    
    # Wait for services
    print_step "Waiting for services to be ready..."
    sleep 10
    
    # Show success information
    echo ""
    print_success "🎉 A.A.I.T.I Docker installation complete!"
    echo ""
    echo -e "${GREEN}Access URLs:${NC}"
    echo "📊 A.A.I.T.I Dashboard: http://localhost:5000"
    
    if [[ "$PROFILES" == *"monitoring"* ]]; then
        echo "📈 Prometheus: http://localhost:9090"
        echo "📋 Grafana: http://localhost:3001 (admin/admin)"
    fi
    
    if [[ "$PROFILES" == *"nginx"* ]]; then
        echo "🌐 Nginx Proxy: http://localhost"
    fi
    
    echo ""
    echo -e "${BLUE}Management Commands:${NC}"
    echo "📋 View logs: $COMPOSE_CMD logs -f"
    echo "📊 Check status: $COMPOSE_CMD ps"
    echo "⏹️  Stop: $COMPOSE_CMD down"
    echo "🔄 Restart: $COMPOSE_CMD restart"
    echo ""
}

# NPM installation method
install_npm() {
    print_step "Starting NPM installation..."
    
    if ! check_node; then
        print_error "Node.js setup failed. Please install Node.js 18+ and try again."
        exit 1
    fi
    
    echo ""
    echo -e "${BLUE}Select NPM installation type:${NC}"
    echo "1) 🚀 Production (recommended for live trading)"
    echo "2) 🔧 Development (for testing and development)"
    echo "3) ⚡ Fast Install (skip some optimizations)"
    echo ""
    
    read -p "Enter your choice (1-3): " npm_choice
    
    case $npm_choice in
        1)
            INSTALL_CMD="npm run install:production"
            BUILD_CMD="npm run build:production"
            START_CMD="npm start"
            MODE="Production"
            ;;
        2)
            INSTALL_CMD="npm run setup:dev"
            BUILD_CMD=""
            START_CMD="npm run dev"
            MODE="Development"
            ;;
        3)
            INSTALL_CMD="npm run install:fast"
            BUILD_CMD="npm run build"
            START_CMD="npm start"
            MODE="Fast"
            ;;
        *)
            print_error "Invalid selection"
            exit 1
            ;;
    esac
    
    print_info "Installing: $MODE installation"
    
    # Clean previous installation if requested
    if [ -d "node_modules" ] || [ -d "backend/node_modules" ] || [ -d "frontend/node_modules" ]; then
        echo ""
        read -p "Previous installation detected. Clean it? (y/N): " clean_install
        if [[ $clean_install =~ ^[Yy]$ ]]; then
            print_step "Cleaning previous installation..."
            npm run clean 2>/dev/null || true
        fi
    fi
    
    # Install dependencies
    print_step "Installing dependencies (this may take several minutes)..."
    $INSTALL_CMD
    
    # Build if needed
    if [ ! -z "$BUILD_CMD" ]; then
        print_step "Building application..."
        $BUILD_CMD
    fi
    
    # Success information
    echo ""
    print_success "🎉 A.A.I.T.I NPM installation complete!"
    echo ""
    echo -e "${GREEN}Next steps:${NC}"
    echo "1. Start the application: $START_CMD"
    echo "2. Open your browser to: http://localhost:3000"
    echo "3. Backend API: http://localhost:5000"
    echo "4. Check health: npm run health"
    echo ""
    
    # Ask to start now
    read -p "Would you like to start A.A.I.T.I now? (y/N): " start_now
    if [[ $start_now =~ ^[Yy]$ ]]; then
        print_info "🚀 Starting A.A.I.T.I..."
        echo "Press Ctrl+C to stop"
        sleep 2
        $START_CMD
    fi
}

# Demo functionality
run_demo() {
    print_step "Starting A.A.I.T.I Demo..."
    
    if check_docker; then
        echo ""
        echo -e "${BLUE}Demo Options:${NC}"
        echo "1) 🎯 Quick Demo (Production setup)"
        echo "2) 🔧 Development Demo (with hot reload)"
        echo "3) 📊 Full Demo (with monitoring)"
        echo ""
        
        read -p "Choose demo type (1-3): " demo_choice
        
        case $demo_choice in
            1)
                print_info "Starting quick production demo..."
                $COMPOSE_CMD up -d aaiti
                ;;
            2)
                print_info "Starting development demo..."
                $COMPOSE_CMD --profile development up -d
                ;;
            3)
                print_info "Starting full demo with monitoring..."
                $COMPOSE_CMD --profile monitoring up -d
                ;;
            *)
                print_error "Invalid selection"
                exit 1
                ;;
        esac
        
        print_step "Waiting for services to start..."
        sleep 10
        
        echo ""
        print_success "🎉 Demo is running!"
        echo "📊 Dashboard: http://localhost:5000"
        
        if [ "$demo_choice" = "3" ]; then
            echo "📈 Monitoring: http://localhost:9090"
        fi
        
        echo ""
        read -p "View logs? (y/N): " view_logs
        if [[ $view_logs =~ ^[Yy]$ ]]; then
            $COMPOSE_CMD logs -f
        fi
    else
        print_error "Docker is required for demo. Please install Docker first."
        exit 1
    fi
}

# System requirements check
check_system() {
    print_step "Checking system requirements..."
    
    detect_os
    
    echo ""
    echo -e "${BLUE}System Information:${NC}"
    echo "Operating System: $OS"
    echo "Architecture: $(uname -m)"
    
    if [ "$OS" = "linux" ]; then
        if [ -f /etc/os-release ]; then
            echo "Distribution: $(grep PRETTY_NAME /etc/os-release | cut -d'"' -f2)"
        fi
    elif [ "$OS" = "macos" ]; then
        echo "macOS Version: $(sw_vers -productVersion)"
    fi
    
    echo ""
    
    # Check Docker
    if check_docker; then
        docker_version=$(docker --version | cut -d' ' -f3 | sed 's/,//')
        echo "✅ Docker: $docker_version"
    else
        echo "❌ Docker: Not installed or not running"
    fi
    
    # Check Node.js
    if check_node; then
        node_version=$(node --version)
        npm_version=$(npm --version)
        echo "✅ Node.js: $node_version"
        echo "✅ npm: $npm_version"
    else
        echo "❌ Node.js: Not installed or too old"
    fi
    
    # Check system resources
    echo ""
    print_step "System Resources:"
    
    case "$OS" in
        "linux")
            if [ -f /proc/meminfo ]; then
                total_memory=$(grep MemTotal /proc/meminfo | awk '{print int($2/1024/1024)}')
                echo "Memory: ${total_memory}GB"
            fi
            
            available_space=$(df -BG . | tail -1 | awk '{print $4}' | sed 's/G//')
            echo "Disk Space: ${available_space}GB available"
            ;;
        "macos")
            total_memory=$(sysctl -n hw.memsize | awk '{print int($1/1024/1024/1024)}')
            echo "Memory: ${total_memory}GB"
            
            available_space=$(df -g . | tail -1 | awk '{print $4}')
            echo "Disk Space: ${available_space}GB available"
            ;;
    esac
    
    echo ""
    print_success "System check complete!"
}

# Show help
show_help() {
    echo "A.A.I.T.I Universal Installer & Toolkit"
    echo ""
    echo "Usage: ./install [command] [options]"
    echo ""
    echo "Commands:"
    echo "  install, i         Interactive installation menu"
    echo "  docker, d          Docker-based installation"
    echo "  npm, n             NPM-based installation"
    echo "  demo, run          Run demo"
    echo "  check, status      Check system requirements"
    echo "  help, h            Show this help message"
    echo ""
    echo "Options:"
    echo "  --production       Production installation"
    echo "  --development      Development installation"
    echo "  --quick            Quick installation"
    echo ""
    echo "Examples:"
    echo "  ./install             # Interactive menu"
    echo "  ./install docker      # Docker installation"
    echo "  ./install npm --dev   # NPM development install"
    echo "  ./install demo        # Run demo"
    echo "  ./install check       # System check"
    echo ""
}

# Main installation menu
main_menu() {
    detect_os
    
    echo ""
    echo -e "${CYAN}🔧 A.A.I.T.I Installation Toolkit${NC}"
    echo -e "${CYAN}===================================${NC}"
    echo ""
    echo "1) 🐳 Docker Installation (Recommended)"
    echo "2) 📦 NPM Installation (Advanced)"
    echo "3) 🎮 Run Demo"
    echo "4) 🔍 Check System Requirements"
    echo "5) ❓ Help"
    echo "6) 🚪 Exit"
    echo ""
    
    read -p "Select an option (1-6): " choice
    
    case $choice in
        1)
            install_docker
            ;;
        2)
            install_npm
            ;;
        3)
            run_demo
            ;;
        4)
            check_system
            ;;
        5)
            show_help
            ;;
        6)
            print_info "Goodbye! 👋"
            exit 0
            ;;
        *)
            print_error "Invalid selection"
            exit 1
            ;;
    esac
}

# Handle command line arguments
case "${1:-menu}" in
    "install"|"i"|"menu"|"")
        main_menu
        ;;
    "docker"|"d")
        if [[ "$2" == "--production" ]]; then
            install_docker
        elif [[ "$2" == "--development" ]]; then
            install_docker
        else
            install_docker
        fi
        ;;
    "npm"|"n")
        if [[ "$2" == "--production" ]]; then
            install_npm
        elif [[ "$2" == "--development" ]]; then
            install_npm
        else
            install_npm
        fi
        ;;
    "demo"|"run")
        run_demo
        ;;
    "check"|"status")
        check_system
        ;;
    "help"|"h"|"--help"|"-h")
        show_help
        ;;
    *)
        print_error "Unknown command: $1"
        echo ""
        show_help
        exit 1
        ;;
esac