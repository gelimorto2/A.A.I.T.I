#!/bin/bash

# A.A.I.T.I Interactive Docker Installer
# One program for everything - Docker-based installation only

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Configuration
PROJECT_NAME="A.A.I.T.I"
VERSION="2.1.0"

# Print header
echo -e "${BLUE}"
cat << EOF
╔══════════════════════════════════════════════════════════════════════════════════════╗
║                    🚀 ${PROJECT_NAME} v${VERSION} - Interactive Installer                     ║
║                      Auto AI Trading Interface - Docker Edition                     ║
╚══════════════════════════════════════════════════════════════════════════════════════╝
EOF
echo -e "${NC}"

# Print functions
print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

print_step() {
    echo -e "${PURPLE}🔧 $1${NC}"
}

# ----------------------------------------------------------------------------
# Interactive configuration & admin setup (must be defined before use)
# ----------------------------------------------------------------------------
setup_configuration() {
    # $1 == true indicates forced re-run
    local force_rerun=${1:-false}
    local cred_file="backend/config/credentials.enc"
    local key_file="backend/config/encryption.key"

    if [ -f "$cred_file" ] && [ "$force_rerun" != true ]; then
        print_info "Existing encrypted credentials detected (backend/config/credentials.enc)"
        echo -ne "${CYAN}Run admin setup anyway? (y/N): ${NC}"
        read -r rerun
        if [[ ! $rerun =~ ^[Yy]$ ]]; then
            print_info "Skipping configuration setup"
            return 0
        fi
    fi

    if ! check_nodejs; then
        print_warning "Node.js not available – skipping admin setup (will use defaults)."
        return 0
    fi

    echo ""
    print_info "Collecting initial configuration values (press Enter to accept defaults)"

    # Admin details
    read -r -p "Admin username [admin]: " ADMIN_USERNAME
    ADMIN_USERNAME=${ADMIN_USERNAME:-admin}

    read -r -p "Admin email [admin@example.com]: " ADMIN_EMAIL
    ADMIN_EMAIL=${ADMIN_EMAIL:-admin@example.com}

    # Secure password input (double entry)
    while true; do
        echo -ne "Admin password (min 8 chars): "
        stty -echo; read -r ADMIN_PASSWORD; stty echo; echo ""
        echo -ne "Confirm password: "
        stty -echo; read -r ADMIN_PASSWORD_CONFIRM; stty echo; echo ""
        if [ "${#ADMIN_PASSWORD}" -lt 8 ]; then
            print_error "Password too short."
            continue
        fi
        if [ "$ADMIN_PASSWORD" != "$ADMIN_PASSWORD_CONFIRM" ]; then
            print_error "Passwords do not match."
            continue
        fi
        break
    done

    # Port (optional)
    read -r -p "Backend port [5000]: " APP_PORT
    APP_PORT=${APP_PORT:-5000}

    # Optionally rotate JWT secret
    echo -ne "Rotate JWT secret? (Y/n): "
    read -r rotate_secret
    if [[ -z "$rotate_secret" || $rotate_secret =~ ^[Yy]$ ]]; then
        ROTATE_JWT="--rotate-jwt"
    else
        ROTATE_JWT=""
    fi

    print_step "Applying configuration..."
    # Run host-side (may use host DB path) mainly to set encrypted credentials; container init will ensure user in container DB volume
    node backend/scripts/init-admin.js \
        --username "$ADMIN_USERNAME" \
        --email "$ADMIN_EMAIL" \
        --password "$ADMIN_PASSWORD" \
        --port "$APP_PORT" $ROTATE_JWT || {
            print_warning "Host admin setup script failed; will still attempt inside container."
        }

    # Persist values for later container initialization
    cat > .aaiti_setup.env <<EOF
AAITI_ADMIN_USERNAME=${ADMIN_USERNAME}
AAITI_ADMIN_EMAIL=${ADMIN_EMAIL}
AAITI_ADMIN_PASSWORD=${ADMIN_PASSWORD}
AAITI_APP_PORT=${APP_PORT}
AAITI_ROTATE_JWT=$([ -n "$ROTATE_JWT" ] && echo 1 || echo 0)
EOF
    chmod 600 .aaiti_setup.env || true

    print_success "Configuration captured. Will initialize admin inside container after build."
}

# Check if Node.js and npm are installed
check_nodejs() {
    print_step "Checking Node.js installation..."
    
    if ! command -v node &> /dev/null; then
        print_warning "Node.js is not installed. Installing Node.js..."
        
        # Install Node.js based on platform
        if command -v apt &> /dev/null; then
            # Ubuntu/Debian
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt-get install -y nodejs
        elif command -v yum &> /dev/null; then
            # RHEL/CentOS
            curl -fsSL https://rpm.nodesource.com/setup_18.x | sudo bash -
            sudo yum install -y nodejs npm
        elif command -v brew &> /dev/null; then
            # macOS with Homebrew
            brew install node
        else
            print_error "Cannot automatically install Node.js. Please install manually:"
            echo "Visit: https://nodejs.org/"
            return 1
        fi
    fi
    
    # Check Node.js version
    NODE_VERSION=$(node --version 2>/dev/null | sed 's/v//')
    if [[ $(echo "$NODE_VERSION 18.0.0" | tr " " "\n" | sort -V | head -n1) == "18.0.0" ]]; then
        print_success "Node.js $NODE_VERSION is installed"
    else
        print_warning "Node.js version $NODE_VERSION detected. Version 18+ recommended."
    fi
    
    # Check npm
    if ! command -v npm &> /dev/null; then
        print_error "npm is not installed"
        return 1
    fi
    
    NPM_VERSION=$(npm --version 2>/dev/null)
    print_success "npm $NPM_VERSION is available"
    return 0
}

# Install npm dependencies for all components
install_npm_dependencies() {
    print_step "Installing npm dependencies..."
    
    # Root dependencies
    if [ -f "package.json" ]; then
        print_info "📦 Installing root dependencies..."
        if ! npm install --production; then
            print_error "Failed to install root dependencies"
            return 1
        fi
        print_success "Root dependencies installed"
    fi
    
    # Frontend dependencies
    if [ -d "frontend" ] && [ -f "frontend/package.json" ]; then
        print_info "📦 Installing frontend dependencies..."
        cd frontend
        if ! npm install; then
            print_error "Failed to install frontend dependencies"
            cd ..
            return 1
        fi
        cd ..
        print_success "Frontend dependencies installed"
    fi
    
    # Backend dependencies
    if [ -d "backend" ] && [ -f "backend/package.json" ]; then
        print_info "📦 Installing backend dependencies..."
        cd backend
        if ! npm install --production; then
            print_error "Failed to install backend dependencies"
            cd ..
            return 1
        fi
        cd ..
        print_success "Backend dependencies installed"
    fi
    
    # Microservices dependencies
    if [ -d "microservices" ]; then
        # API Gateway
        if [ -f "microservices/api-gateway/package.json" ]; then
            print_info "📦 Installing API Gateway dependencies..."
            cd microservices/api-gateway
            if ! npm install --production; then
                print_error "Failed to install API Gateway dependencies"
                cd ../..
                return 1
            fi
            cd ../..
            print_success "API Gateway dependencies installed"
        fi
        
        # Auth Service
        if [ -f "microservices/auth-service/package.json" ]; then
            print_info "📦 Installing Auth Service dependencies..."
            cd microservices/auth-service
            if ! npm install --production; then
                print_error "Failed to install Auth Service dependencies"
                cd ../..
                return 1
            fi
            cd ../..
            print_success "Auth Service dependencies installed"
        fi
        
        # Shared utilities
        if [ -f "microservices/shared/package.json" ]; then
            print_info "📦 Installing Shared utilities dependencies..."
            cd microservices/shared
            if ! npm install --production; then
                print_error "Failed to install Shared utilities dependencies"
                cd ../..
                return 1
            fi
            cd ../..
            print_success "Shared utilities dependencies installed"
        fi
    fi
    
    print_success "All npm dependencies installed successfully"
    return 0
}

# Check if Docker is installed and running
check_docker() {
    print_step "Checking Docker installation..."
    
    if ! command -v docker &> /dev/null; then
        print_error "Docker is not installed. Please install Docker first:"
        echo ""
        echo "🐧 Linux: curl -fsSL https://get.docker.com | sh"
        echo "🍎 macOS: Download Docker Desktop from https://docker.com"
        echo ""
        return 1
    fi
    
    if ! docker info &> /dev/null; then
        print_error "Docker daemon is not running. Please start Docker:"
        echo ""
        echo "🐧 Linux: sudo systemctl start docker"
        echo "🍎 macOS: Start Docker Desktop"
        echo ""
        return 1
    fi
    
    print_success "Docker is installed and running"
    
    # Check Docker Compose
    if docker compose version &> /dev/null; then
        COMPOSE_CMD="docker compose"
    elif command -v docker-compose &> /dev/null; then
        COMPOSE_CMD="docker-compose"
    else
        print_error "Docker Compose is not available"
        return 1
    fi
    
    print_success "Docker Compose is available"
    return 0
}

# Main installation function
install_aaiti() {
    print_step "Starting A.A.I.T.I installation..."
    
    if ! check_docker; then
        print_error "Docker setup failed. Please install Docker and try again."
        echo ""
        echo "Visit: https://docs.docker.com/get-docker/"
        exit 1
    fi
    
    echo ""
    print_info "🐳 A.A.I.T.I will be installed using Docker"
    print_info "📊 This creates a production-ready trading platform"
    echo ""
    
    # Ask for confirmation
    echo ""
    echo -ne "${CYAN}Continue with installation? (y/N): ${NC}"
    read -r confirm
    
    if [[ ! $confirm =~ ^[Yy]$ ]]; then
        print_info "Installation cancelled"
        exit 0
    fi
    
    # Automatically install npm dependencies (non-blocking)
    echo ""
    print_step "Preparing development dependencies (optional)..."
    if check_nodejs; then
        if ! install_npm_dependencies; then
            print_warning "npm dependency installation failed. Continuing with Docker installation..."
        fi
    else
        print_info "Skipping npm dependency installation (Node.js not available)."
    fi

    # Run first‑time setup (admin user / configuration) before building images
    echo ""
    print_step "Configuration & Admin setup"
    setup_configuration
    
    # Build image(s)
    print_step "Building Docker containers (this may take a few minutes)..."
    echo -ne "${YELLOW}Building: "
    for _ in {1..20}; do
        echo -ne "▓"
        sleep 0.1
    done
    echo -e " ${GREEN}✓${NC}"
    
    if ! $COMPOSE_CMD build aaiti; then
        print_error "Failed to build Docker containers"
        print_error "Please check Docker is running and try again"
        exit 1
    fi

    # Initialize admin inside container volume using temporary run
    if [ -f .aaiti_setup.env ]; then
        # shellcheck disable=SC1091
        source .aaiti_setup.env
        print_step "Initializing admin user inside container volume..."
        INIT_CMD="$COMPOSE_CMD run --rm -e PORT=$AAITI_APP_PORT aaiti node backend/scripts/init-admin.js --username $AAITI_ADMIN_USERNAME --email $AAITI_ADMIN_EMAIL --password $AAITI_ADMIN_PASSWORD --port $AAITI_APP_PORT"
        if [ "$AAITI_ROTATE_JWT" = "1" ]; then
            INIT_CMD+=" --rotate-jwt"
        fi
        # Avoid echoing password
        if eval "$INIT_CMD" >/dev/null 2>&1; then
            print_success "Admin initialized inside container volume"
        else
            print_warning "Container admin initialization failed. You can run: $COMPOSE_CMD run --rm aaiti node backend/scripts/init-admin.js --username $AAITI_ADMIN_USERNAME --email $AAITI_ADMIN_EMAIL --password '<secret>' --port $AAITI_APP_PORT"
        fi
    fi

    # Offer to start now
    echo ""
    echo -ne "${CYAN}Start A.A.I.T.I services now? (Y/n): ${NC}"
    read -r start_confirm
    if [[ -z "$start_confirm" || $start_confirm =~ ^[Yy]$ ]]; then
        print_step "Starting A.A.I.T.I services..."
        echo -ne "${YELLOW}Starting: "
        for _ in {1..15}; do
            echo -ne "▓"
            sleep 0.1
        done
        echo -e " ${GREEN}✓${NC}"

        if ! $COMPOSE_CMD up -d aaiti; then
            print_error "Failed to start services"
            print_error "Please check the logs with: $COMPOSE_CMD logs aaiti"
            exit 1
        fi

        # Wait for services
        print_step "Waiting for services to initialize..."
        echo -ne "${CYAN}Initializing"
        for _ in {1..30}; do
            echo -ne "."
            sleep 0.3
        done
        echo -e " ${GREEN}Ready!${NC}"
    else
        print_info "You can start later with: ./install start"
    fi
    
    # Success message
    echo ""
    echo -e "${GREEN}${WHITE}╔════════════════════════════════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${GREEN}${WHITE}║                           🎉 Installation Complete! 🎉                                  ║${NC}"
    echo -e "${GREEN}${WHITE}╚════════════════════════════════════════════════════════════════════════════════════════╝${NC}"
    echo ""
    echo -e "${WHITE}📊 A.A.I.T.I Dashboard:${NC} ${BLUE}http://localhost:5000${NC}"
    echo ""
    echo -e "${WHITE}Management Commands:${NC}"
    echo -e "${CYAN}▶️  Start:${NC} ./install start"
    echo -e "${CYAN}📊 Check status:${NC} ./install status"
    echo -e "${CYAN}📋 View logs:${NC} ./install logs"
    echo -e "${CYAN}⏹️  Stop:${NC} ./install stop"
    echo -e "${CYAN}🔄 Restart:${NC} ./install restart"
    echo ""
    
    echo -e "${WHITE}Development Commands:${NC}"
    echo -e "${CYAN}🛠️  Frontend dev:${NC} cd frontend && npm start"
    echo -e "${CYAN}🛠️  Backend dev:${NC} cd backend && npm run dev"
    echo -e "${CYAN}🛠️  API Gateway:${NC} cd microservices/api-gateway && npm run dev"
    echo -e "${CYAN}🛠️  Auth Service:${NC} cd microservices/auth-service && npm run dev"
    echo ""
}

# Install only npm dependencies
install_dependencies_only() {
    print_step "Installing npm dependencies only..."
    
    if ! check_nodejs; then
        print_error "Node.js setup failed. Please install Node.js manually."
        echo ""
        echo "Visit: https://nodejs.org/"
        exit 1
    fi
    
    if ! install_npm_dependencies; then
        print_error "Failed to install npm dependencies"
        exit 1
    fi
    
    print_success "All npm dependencies installed successfully!"
    echo ""
    echo -e "${WHITE}Next steps:${NC}"
    echo -e "${CYAN}🛠️  Frontend dev:${NC} cd frontend && npm start"
    echo -e "${CYAN}🛠️  Backend dev:${NC} cd backend && npm run dev"
    echo -e "${CYAN}🛠️  API Gateway:${NC} cd microservices/api-gateway && npm run dev"
    echo -e "${CYAN}🛠️  Auth Service:${NC} cd microservices/auth-service && npm run dev"
    echo -e "${CYAN}🐳 Full Docker setup:${NC} ./install"
    echo ""
}

# Start A.A.I.T.I
start_aaiti() {
    print_step "Starting A.A.I.T.I services..."

    if ! check_docker; then
        print_error "Docker is not available"
        return 1
    fi

    # Build if needed and start
    if ! $COMPOSE_CMD up -d --build aaiti; then
        print_error "Failed to start services"
        print_error "Please check the logs with: $COMPOSE_CMD logs aaiti"
        return 1
    fi

    # Wait briefly and show status
    sleep 2
    check_status
}

# Restart A.A.I.T.I
restart_aaiti() {
    print_step "Restarting A.A.I.T.I..."

    if ! check_docker; then
        print_error "Docker is not available"
        return 1
    fi

    if $COMPOSE_CMD restart aaiti; then
        print_success "A.A.I.T.I restarted"
        sleep 2
        check_status
    else
        print_error "Failed to restart A.A.I.T.I"
    fi
}

# Check status of existing installation (robust)
check_status() {
    print_step "Checking A.A.I.T.I status..."

    if ! check_docker; then
        print_error "Docker is not available"
        return 1
    fi

    # Get container ID (may be empty)
    CONTAINER_ID=$($COMPOSE_CMD ps -q aaiti 2>/dev/null || true)

    if [ -z "$CONTAINER_ID" ]; then
        print_warning "A.A.I.T.I container not created or not running"
        echo "Use: ./install start"
        return 0
    fi

    # Read runtime status and health
    STATUS=$(docker inspect -f '{{.State.Status}}' "$CONTAINER_ID" 2>/dev/null || echo "unknown")
    HEALTH=$(docker inspect -f '{{if .State.Health}}{{.State.Health.Status}}{{else}}none{{end}}' "$CONTAINER_ID" 2>/dev/null || echo "unknown")

    case "$STATUS" in
        running)
            print_success "A.A.I.T.I is running (health: $HEALTH)"
            ;;
        exited|dead)
            print_error "A.A.I.T.I is stopped (status: $STATUS)"
            echo "Use: ./install start"
            ;;
        created|restarting|paused)
            print_warning "A.A.I.T.I status: $STATUS (health: $HEALTH)"
            ;;
        *)
            print_warning "A.A.I.T.I status: $STATUS"
            ;;
    esac

    # Show dashboard URL when running
    if [ "$STATUS" = "running" ]; then
        echo -e "${BLUE}📊 Dashboard: http://localhost:5000${NC}"
        # Quick HTTP health probe (non-fatal)
        if command -v curl &> /dev/null; then
            if curl -fsS http://localhost:5000/api/health >/dev/null 2>&1; then
                print_success "HTTP health endpoint is responding"
            else
                print_warning "HTTP health endpoint not responding yet"
            fi
        fi
    else
        # Show last logs to help diagnose
        print_info "Recent logs (last 50 lines):"
        $COMPOSE_CMD logs --tail 50 aaiti || true
    fi
}

# Stop A.A.I.T.I
stop_aaiti() {
    print_step "Stopping A.A.I.T.I..."
    
    if ! check_docker; then
        print_error "Docker is not available"
        return 1
    fi
    
    if $COMPOSE_CMD down; then
        print_success "A.A.I.T.I stopped successfully"
    else
        print_error "Failed to stop A.A.I.T.I"
    fi
}

# Show logs
show_logs() {
    print_step "Showing A.A.I.T.I logs..."
    
    if ! check_docker; then
        print_error "Docker is not available"
        return 1
    fi
    
    print_info "Press Ctrl+C to exit logs"
    sleep 2
    $COMPOSE_CMD logs -f aaiti
}

# Show help
show_help() {
    echo "${PROJECT_NAME} Interactive Docker Installer"
    echo ""
    echo "This installer creates a production-ready ${PROJECT_NAME} trading platform using Docker."
    echo ""
    echo "Requirements:"
    echo "  • Docker 20.0+ with Docker Compose"
    echo "  • 4GB RAM (recommended)"
    echo "  • 2GB disk space"
    echo "  • Internet connection"
    echo "  • Node.js 18+ and npm (for development mode)"
    echo ""
    echo "Supported Platforms:"
    echo "  • Linux (all distributions with Docker support)"
    echo "  • macOS with Docker Desktop"
    echo ""
    echo "Installation Types:"
    echo "  • Docker-only: Production-ready containerized deployment"
    echo "  • Full: Docker + npm dependencies for development"
    echo ""
    echo "Usage:"
    echo "  ./install             # Interactive menu"
    echo "  ./install help        # Show this help"
    echo "  ./install start       # Build (if needed) and start services"
    echo "  ./install restart     # Restart services"
    echo "  ./install stop        # Stop services"
    echo "  ./install status      # Show status"
    echo "  ./install logs        # Tail logs"
    echo ""
}

# Main menu
main_menu() {
    while true; do
        echo ""
        echo -e "${CYAN}🔧 ${PROJECT_NAME} Interactive Installer${NC}"
        echo -e "${CYAN}===================================${NC}"
        echo ""
        echo "1) Install ${PROJECT_NAME} (Production Ready)"
        echo "2) Start ${PROJECT_NAME}"
        echo "3) Check Status"
        echo "4) Stop ${PROJECT_NAME}"
        echo "5) View Logs"
        echo "6) Help"
        echo "7) Re-run Setup / Admin Configuration"
        echo "8) Exit"
        echo ""
        
    echo -ne "${CYAN}Select an option (1-8): ${NC}"
        read -r choice
        
        case $choice in
            1)
                install_aaiti
                ;;
            2)
                start_aaiti
                ;;
            3)
                check_status
                ;;
            4)
                stop_aaiti
                ;;
            5)
                show_logs
                ;;
            6)
                show_help
                ;;
            7)
                setup_configuration true
                ;;
            8)
                print_info "Goodbye! 👋"
                exit 0
                ;;
            *)
                print_error "Invalid selection. Please choose 1-8."
                sleep 2
                ;;
        esac
        
        echo ""
        echo -ne "${YELLOW}Press Enter to continue...${NC}"
        read -r
    done
}

# Handle command line arguments
case "${1:-}" in
    "help"|"--help"|"-h")
        show_help
        ;;
    "status"|"check")
        check_status
        ;;
    "start")
        start_aaiti
        ;;
    "restart")
        restart_aaiti
        ;;
    "stop")
        stop_aaiti
        ;;
    "logs")
        show_logs
        ;;
    *)
        main_menu
        ;;
esac