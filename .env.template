# AAITI Performance and GitHub Integration Configuration
# Copy this to your .env file to enable GitHub issue reporting

# =============================================================================
# GitHub Issue Reporting Configuration
# =============================================================================

# GitHub Personal Access Token (required for issue reporting)
# Create at: https://github.com/settings/tokens
# Required permissions: repo (for public repos) or public_repo (for private repos)
GITHUB_TOKEN=your_github_token_here

# GitHub Repository Information
GITHUB_OWNER=gelimorto2
GITHUB_REPO=A.A.I.T.I

# Issue Reporting Settings
GITHUB_AUTO_CREATE_ISSUES=true
GITHUB_MIN_SEVERITY=error
GITHUB_MAX_ISSUES_PER_HOUR=5

# =============================================================================
# Performance Monitoring Configuration  
# =============================================================================

# Performance Thresholds
MEMORY_THRESHOLD=0.85          # 85% memory usage triggers alert
CPU_THRESHOLD=0.80             # 80% CPU usage triggers alert
RESPONSE_TIME_THRESHOLD=3000   # 3 seconds response time threshold
ERROR_RATE_THRESHOLD=0.05      # 5% error rate threshold

# Monitoring Intervals (milliseconds)
MEMORY_CHECK_INTERVAL=30000    # Check memory every 30 seconds
CPU_CHECK_INTERVAL=60000       # Check CPU every 60 seconds
SCRIPT_TIMEOUT_WARNING=30000   # Warn if script takes more than 30 seconds
API_TIMEOUT_WARNING=5000       # Warn if API call takes more than 5 seconds

# Optimization Settings
ENABLE_GARBAGE_COLLECTION=true
ENABLE_MEMORY_OPTIMIZATION=true
ENABLE_REQUEST_BATCHING=true
ENABLE_CACHING=true
GC_INTERVAL=300000             # Run GC optimization every 5 minutes

# =============================================================================
# Notification Integration
# =============================================================================

# Slack Integration (optional)
SLACK_WEBHOOK_URL=your_slack_webhook_url
SLACK_CHANNEL=#aaiti-alerts

# Discord Integration (optional)  
DISCORD_WEBHOOK_URL=your_discord_webhook_url

# Email Notifications (optional)
SMTP_HOST=your_smtp_host
SMTP_PORT=587
SMTP_USER=your_email
SMTP_PASS=your_password
FROM_EMAIL=alerts@aaiti.trade

# SMS Notifications via Twilio (optional)
TWILIO_ACCOUNT_SID=your_twilio_sid
TWILIO_AUTH_TOKEN=your_twilio_token
TWILIO_FROM_NUMBER=your_twilio_number

# =============================================================================
# Database Performance Optimization
# =============================================================================

# SQLite Performance Settings
SQLITE_CACHE_SIZE=10000
SQLITE_JOURNAL_MODE=WAL
SQLITE_SYNCHRONOUS=NORMAL
SQLITE_TEMP_STORE=MEMORY
SQLITE_MMAP_SIZE=268435456

# Connection Pool Settings
DB_POOL_MIN=2
DB_POOL_MAX=20
DB_ACQUIRE_TIMEOUT=30000
DB_IDLE_TIMEOUT=30000

# =============================================================================
# API Performance Settings
# =============================================================================

# Rate Limiting
API_RATE_LIMIT_WINDOW=900000   # 15 minutes
API_RATE_LIMIT_MAX=1000        # 1000 requests per window

# Request Processing
CONCURRENT_REQUESTS=50
QUEUE_TIMEOUT=30000

# Response Optimization  
API_COMPRESS=true
API_ETAG=true

# =============================================================================
# Market Data Performance
# =============================================================================

# API Optimization
MARKET_DATA_BATCH_SIZE=10
MARKET_DATA_REQUEST_DELAY=1000
MARKET_DATA_MAX_RETRIES=3
MARKET_DATA_TIMEOUT=15000

# Caching
MARKET_DATA_CACHE_TTL=60       # 1 minute cache
MARKET_DATA_CACHE_SIZE=1000

# =============================================================================
# Logging Configuration
# =============================================================================

# Log Levels: error, warn, info, verbose, debug, silly
LOG_LEVEL=info
LOG_MAX_FILES=5
LOG_MAX_SIZE=10m

# Performance Logging
LOG_REQUESTS=true
LOG_SQL_QUERIES=false
LOG_CACHE_HITS=false

# =============================================================================
# Health Monitoring
# =============================================================================

HEALTH_CHECK_INTERVAL=30000
COLLECT_METRICS=true
MONITOR_MEMORY=true
MONITOR_CPU=true
MONITOR_DATABASE=true

# =============================================================================
# Example Usage Commands
# =============================================================================

# Test the GitHub integration:
# node backend/scripts/performance-demo.js

# Check performance metrics:
# curl http://localhost:5000/api/performance/metrics

# Test GitHub connection:
# curl -X POST http://localhost:5000/api/performance/github/test

# Create test GitHub issue:
# curl -X POST http://localhost:5000/api/performance/github/test-issue \
#   -H "Content-Type: application/json" \
#   -d '{"title":"Test Issue","description":"Testing GitHub integration"}'

# Get health status:
# curl http://localhost:5000/api/performance/health