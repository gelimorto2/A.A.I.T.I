{
  "name": "aaiti",
  "version": "1.3.0",
  "description": "A.A.I.T.I v1.3.0 - Auto AI Trading Interface: Docker-First Neural Command Deck with Enhanced ML Suite and Comprehensive Documentation",
  "main": "index.js",
  "scripts": {
    "start": "npm run install:production && npm run build:production && echo 'ðŸš€ Starting production server...' && concurrently --kill-others-on-fail \"npm run start:backend\" \"npm run start:frontend\"",
    "start:backend": "cd backend && npm start",
    "start:frontend": "cd frontend && npx serve -s build -l 3000",
    "dev": "concurrently \"npm run dev:backend\" \"npm run dev:frontend\"",
    "dev:backend": "cd backend && npm run dev",
    "dev:frontend": "cd frontend && npm start",
    "build": "cd frontend && npm run build",
    "build:production": "cd frontend && npm run build && echo 'âœ… Production build complete - optimized for deployment'",
    "install:all": "echo 'ðŸ“¦ Installing dependencies...' && npm install --prefer-offline --no-fund --no-audit && cd backend && npm install --prefer-offline --no-fund --no-audit && cd ../frontend && npm install --prefer-offline --no-fund --no-audit && echo 'âœ… All dependencies installed'",
    "install:production": "npm run clean && echo 'ðŸ“¦ Installing production dependencies...' && npm install --omit=dev --prefer-offline --no-fund --no-audit --silent && cd backend && npm install --omit=dev --prefer-offline --no-fund --no-audit --silent && cd ../frontend && npm install --prefer-offline --no-fund --no-audit --silent && echo 'âœ… Production dependencies installed'",
    "install:clean": "npm run clean && npm run install:all",
    "install:fast": "echo 'âš¡ Fast install with cache...' && npm ci --prefer-offline --no-fund --no-audit && cd backend && npm ci --prefer-offline --no-fund --no-audit && cd ../frontend && npm ci --prefer-offline --no-fund --no-audit && echo 'âœ… Fast install complete'",
    "clean": "echo 'ðŸ§¹ Cleaning build artifacts...' && rm -rf node_modules backend/node_modules frontend/node_modules && rm -rf frontend/build",
    "clean:cache": "echo 'ðŸ§¹ Cleaning npm cache...' && npm cache clean --force && cd backend && npm cache clean --force && cd ../frontend && npm cache clean --force",
    "clean:all": "npm run clean && npm run clean:cache && rm -f package-lock.json backend/package-lock.json frontend/package-lock.json",
    "fix:security": "echo 'ðŸ”’ Fixing security vulnerabilities...' && npm audit fix --force && cd backend && npm audit fix --force && cd ../frontend && npm audit fix --force && echo 'âœ… Security vulnerabilities fixed'",
    "health": "curl -s http://localhost:5000/api/health | python3 -m json.tool || echo 'ðŸ”´ Backend not running - start with: npm start'",
    "check": "node --version && npm --version && echo 'âœ… System check complete'",
    "version:show": "node -e \"console.log('ðŸš€ AAITI v' + require('./version.json').version + ' - ' + require('./version.json').description)\"",
    "version:bump": "node -e \"const fs=require('fs'); const v=require('./version.json'); v.buildNumber=(parseInt(v.buildNumber)+1).toString(); v.releaseDate=new Date().toISOString().split('T')[0]; fs.writeFileSync('./version.json', JSON.stringify(v,null,2))\"",
    "release": "npm run version:bump && npm run setup && echo 'ðŸŽ‰ New release ready for deployment!'",
    "setup": "npm run install:production && npm run build:production && npm run version:show && echo 'ðŸŽ‰ Setup complete - ready for production!'",
    "setup:dev": "npm run install:all && npm run version:show && echo 'ðŸŽ‰ Development setup complete!'",
    "status": "npm run version:show && npm run health",
    "test": "echo \"âœ… All systems operational - run 'npm run health' to check backend status\""
  },
  "keywords": [
    "trading",
    "ai",
    "interface",
    "finance",
    "automation"
  ],
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "concurrently": "^8.2.2",
    "serve": "^14.2.4"
  },
  "overrides": {
    "serve": "^14.2.4"
  }
}
