#!/bin/bash

# A.A.I.T.I Universal Demo Launcher
# Cross-platform demo that auto-detects your system

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Print header
echo -e "${BLUE}"
cat << "EOF"
╔══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
║                               🚀 A.A.I.T.I v2.0.0 - Universal Demo                                                 ║
║                               Auto AI Trading Interface - Cross-Platform Demo                                       ║
╚══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝
EOF
echo -e "${NC}"

# Function to print messages
print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

# Detect operating system
detect_os() {
    case "$(uname -s)" in
        Linux*)
            OS="linux"
            print_info "Detected: Linux"
            ;;
        Darwin*)
            OS="macos"
            print_info "Detected: macOS"
            ;;
        CYGWIN*|MINGW*|MSYS*)
            OS="windows"
            print_info "Detected: Windows (WSL/Git Bash)"
            ;;
        *)
            OS="linux"
            print_warning "Unknown OS, defaulting to Linux"
            ;;
    esac
}

# Get script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Main demo function
main() {
    detect_os
    
    echo ""
    print_info "Starting A.A.I.T.I demo for $OS..."
    echo ""
    
    # Check for verbose demo preference
    VERBOSE_SCRIPT="$SCRIPT_DIR/scripts/$OS/demo-verbose.sh"
    SIMPLE_SCRIPT="$SCRIPT_DIR/scripts/$OS/demo-impl.sh"
    
    # Show demo options
    echo -e "${BLUE}Demo Options:${NC}"
    echo "1) 🎯 Enhanced Demo (recommended) - Detailed progress and health checks"
    echo "2) 🔄 Quick Demo - Fast startup with minimal output"
    echo ""
    
    read -p "Choose demo type (1-2, default: 1): " choice
    case "${choice:-1}" in
        1)
            if [ -f "$VERBOSE_SCRIPT" ]; then
                print_info "Starting enhanced demo with detailed progress..."
                exec "$VERBOSE_SCRIPT" "$@"
            else
                print_warning "Enhanced demo not available, using quick demo"
                choice=2
            fi
            ;;
        2)
            print_info "Starting quick demo..."
            ;;
        *)
            print_info "Invalid choice, using enhanced demo (default)"
            choice=1
            if [ -f "$VERBOSE_SCRIPT" ]; then
                exec "$VERBOSE_SCRIPT" "$@"
            else
                choice=2
            fi
            ;;
    esac
    
    # Run simple demo if we reach here
    if [ "$choice" = "2" ]; then
        if [ -f "$SIMPLE_SCRIPT" ]; then
            exec "$SIMPLE_SCRIPT" "$@"
        elif [ -f "$SCRIPT_DIR/demo.sh" ]; then
            print_warning "OS-specific demo not found, using fallback"
            exec "$SCRIPT_DIR/demo.sh" "$@"
        else
            print_error "No demo script found. Please check your installation."
            exit 1
        fi
    fi
}

# Show help if requested
if [[ "$1" == "--help" || "$1" == "-h" ]]; then
    echo "A.A.I.T.I Universal Demo Launcher"
    echo ""
    echo "Usage: ./demo [options]"
    echo ""
    echo "Options:"
    echo "  --help, -h     Show this help message"
    echo "  --verbose      Use verbose demo (detailed progress)"
    echo "  --quick        Use quick demo (minimal output)"
    echo ""
    echo "The demo will auto-detect your operating system and"
    echo "provide an appropriate demo experience."
    echo ""
    exit 0
fi

# Check for specific demo type flags
if [[ "$1" == "--verbose" ]]; then
    detect_os
    VERBOSE_SCRIPT="$SCRIPT_DIR/scripts/$OS/demo-verbose.sh"
    if [ -f "$VERBOSE_SCRIPT" ]; then
        exec "$VERBOSE_SCRIPT"
    else
        print_warning "Verbose demo not available for $OS, using default"
    fi
fi

if [[ "$1" == "--quick" ]]; then
    detect_os
    QUICK_SCRIPT="$SCRIPT_DIR/scripts/$OS/demo-impl.sh"
    if [ -f "$QUICK_SCRIPT" ]; then
        exec "$QUICK_SCRIPT"
    else
        print_warning "Quick demo not available for $OS, using fallback"
        if [ -f "$SCRIPT_DIR/demo.sh" ]; then
            exec "$SCRIPT_DIR/demo.sh"
        fi
    fi
fi

# Run main demo
main "$@"