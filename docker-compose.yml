services:
  # Main AAITI Application
  aaiti:
    build: 
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - PORT=5000
      - DB_PATH=/app/data/aaiti.sqlite
      - LOG_LEVEL=info
      # Performance Optimizations
      - UV_THREADPOOL_SIZE=16
      - NODE_OPTIONS=--max-old-space-size=2048 --max-semi-space-size=64
      - NPM_CONFIG_UPDATE_NOTIFIER=false
      - FORCE_COLOR=0
      # Database Performance
      - SQLITE_CACHE_SIZE=10000
      - SQLITE_SYNCHRONOUS=NORMAL
      - SQLITE_JOURNAL_MODE=WAL
      # API Performance  
      - API_RATE_LIMIT_WINDOW=900000
      - API_RATE_LIMIT_MAX=1000
      - CACHE_TTL=300
      - CONCURRENT_REQUESTS=50
    volumes:
      - aaiti_data:/app/data
      - aaiti_logs:/app/logs
      - aaiti_cache:/app/cache
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s
    networks:
      - aaiti_network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Development version (optional, for development use)
  aaiti-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: development
    ports:
      - "3000:3000"
      - "5001:5000"
    environment:
      - NODE_ENV=development
      - PORT=5000
      - FRONTEND_PORT=3000
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    volumes:
      - .:/app
      - /app/node_modules
      - /app/backend/node_modules
      - /app/frontend/node_modules
      - aaiti_dev_data:/app/data
    networks:
      - aaiti_network
    profiles:
      - development
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Redis for enhanced caching (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - aaiti_network
    restart: unless-stopped
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    profiles:
      - production
      - redis
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - aaiti
    networks:
      - aaiti_network
    restart: unless-stopped
    profiles:
      - production
      - nginx
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - aaiti_network
    restart: unless-stopped
    profiles:
      - monitoring
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Grafana for monitoring dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - aaiti_network
    restart: unless-stopped
    profiles:
      - monitoring
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

volumes:
  aaiti_data:
    driver: local
  aaiti_logs:
    driver: local
  aaiti_cache:
    driver: local
  aaiti_dev_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  aaiti_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16